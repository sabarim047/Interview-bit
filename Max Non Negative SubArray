public class Solution {
    public ArrayList<Integer> maxset(ArrayList<Integer> A) {
        int N = A.size();
        long maxSum = -1, currentSum = 0;
        int maxStartIndex = -1, maxEndIndex = -1;
        int currentStartIndex = 0;

        for (int i = 0; i < N; i++) {
            if (A.get(i) >= 0) {
                currentSum += A.get(i);
            }
            if (A.get(i) < 0 || i == N - 1) {
                // If it's the last element and non-negative, we include it
                if (A.get(i) >= 0) {
                    if (currentSum > maxSum || 
                        (currentSum == maxSum && (i - currentStartIndex + 1 > maxEndIndex - maxStartIndex + 1))) {
                        maxSum = currentSum;
                        maxStartIndex = currentStartIndex;
                        maxEndIndex = i;
                    }
                } else { // If it's a negative number, we compare and reset
                    if (currentSum > maxSum || 
                        (currentSum == maxSum && (i - currentStartIndex > maxEndIndex - maxStartIndex))) {
                        maxSum = currentSum;
                        maxStartIndex = currentStartIndex;
                        maxEndIndex = i - 1;
                    }
                    currentSum = 0;
                    currentStartIndex = i + 1;
                }
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        if (maxStartIndex == -1) return result; 
        for (int i = maxStartIndex; i <= maxEndIndex; i++) {
            result.add(A.get(i));
        }

        return result;
    }
}

